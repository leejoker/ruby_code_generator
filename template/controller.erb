package <%=data['package_name']%>.controller;

import <%=data['package_name']%>.entity.<%=data['class_name']%>;
import <%=data['package_name']%>.service.<%=data['class_name']%>Service;
import <%=data['common_package']%>.ResponseResult;
import com.google.common.collect.Lists;
import lombok.extern.slf4j.Slf4j;
import org.apache.commons.lang3.exception.ExceptionUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import java.util.List;

/**
 * 理财数据接口
 *
 * @author liang
 * @date 2020/07/31
 */
@Controller
@RequestMapping("/cqbbab/bigdata/<%=data['module_name']%>")
@Slf4j
public class <%=data['class_name']%>Controller {
    @Autowired
    private <%=data['class_name']%>Service <%=data['class_name'].firstdown%>Service;

    @GetMapping(value = "/publishList", produces = {"application/json; charset=UTF-8"})
    @ResponseBody
    public ResponseResult getPublishList() {
        try {
            List<<%=data['class_name']%>> publishList = <%=data['class_name'].firstdown%>Service.getPublishList();
            publishList = publishList == null ? Lists.newArrayList() : publishList;
            return ResponseResult.returnData(publishList, "执行成功");
        } catch (Exception e) {
            log.error("获取发布数据失败: exception={}", ExceptionUtils.getStackTrace(e));
        }
        return ResponseResult.error("获取发布数据失败");
    }

    @RequestMapping(value = "/query", produces = {"application/json; charset=UTF-8"})
    @ResponseBody
    public DataTables<Map<String, Object>> get<%=data['class_name']%>(Integer draw, Integer start, Integer length, String name) {
        DataTables<Map<String, Object>> dataTables = new DataTables<Map<String, Object>>();
        Pageable page = null;
        if (start >= 0 && length > 0) {
            Sort orderNumSort = new Sort(Sort.Direction.DESC, "orderNum");
            Sort updateTimeSort = new Sort(Sort.Direction.DESC, "updateTime");
            page = new PageRequest(start / length, length, orderNumSort.and(updateTimeSort));
        }
        Page<<%=data['class_name']%>> queryPage;
        if (StringUtils.isNotBlank(name)) {
            queryPage = <%=data['class_name'].firstdown%>Service.findByNameLike(name, page);
        } else {
            queryPage = <%=data['class_name'].firstdown%>Service.findByPage(page);
        }
        long totalNum = queryPage.getTotalElements();
        List<<%=data['class_name']%>> queryList = queryPage.getContent();

        List<Map<String, Object>> rstList = new ArrayList<Map<String, Object>>();
        for (<%=data['class_name']%> <%=data['class_name'].firstdown%> : queryList) {
            Map<String, Object> info = new HashMap<String, Object>();
            info.put("id", <%=data['class_name'].firstdown%>.getId());<%for item in data['data'].keys%><%if item.downcase == "id"%>
            info.put("originId", <%=data['class_name'].firstdown%>.getOriginId());<% else %>
            info.put("<%=item.firstdown%>", <%=data['class_name'].firstdown%>.get<%=item.firstup%>());<%end%><%end%>
            info.put("updateTime", <%=data['class_name'].firstdown%>.getUpdateTime());
            info.put("orderNum", <%=data['class_name'].firstdown%>.getOrderNum());
            info.put("publishState", <%=data['class_name'].firstdown%>.getPublishState());
            rstList.add(info);
        }
        dataTables.setDraw(draw + 1);
        dataTables.setRecordsTotal(totalNum);
        dataTables.setRecordsFiltered(totalNum);
        dataTables.setData(rstList);
        return dataTables;
    }
}